#!/usr/bin/env node
/** 
 * build application
 * - configure application
 * - configure web server 
 */
'use strict';

var app = require('../app');
var models = app.db.models;
var sequelize = app.db.sequelize;
var debug = app.util.debug;
var http = app.util.http;

// prepare database and set server
// sequelize.sync({force:true}) - to recreate database
sequelize.sync({force:true}).then(() => {
  /**
   * @function normalizePort - Normalize a port into a number, string, or false.
   * @param {object} val - port number
   * @return {String|boolean}
   */
  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * @function onError - Event listener for HTTP server "error" event.
   * @param {object} error - server error event
   * @throws {object} error
   */
  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * @function onListening - Event listener for HTTP server "listening" event.
   */
  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
  var port = normalizePort(process.env.PORT || '9860'); // get port
  app.set('port', port);                                // set port
  var server = http.createServer(app);                  // create HTTP server
  server.listen(port);                                  // listen at port
  server.on('error', onError);
  server.on('listening', onListening);
}).catch(error => {
  console.error('Error while preparing database');
  console.error(error);
  process.exit(1);
});

// Test catch
// Test transaction
// Test schema validation
// Test express validator
// Logging at model level
// debugging in prod and dev
// security
